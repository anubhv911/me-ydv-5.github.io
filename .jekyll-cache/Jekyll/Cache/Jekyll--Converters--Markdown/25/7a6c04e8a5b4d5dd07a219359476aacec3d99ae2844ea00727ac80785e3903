I"Ø<p>This week I fixed some styling in the previous codebase and other minor issues. Me and Kai had a very fruitful discussion this week for the roadmap ahead. We discussed many things.</p>

<p>Kai verified that <a href="https://bitbucket.org/me_ydv_5/octave/src/default/scripts/miscellaneous/wiki_upload.m"><code class="highlighter-rouge">wiki_upload.m</code></a> (an important dependency for <code class="highlighter-rouge">publish_to_wiki.m</code>) works as expected including the checks for uploading the same image again, wikimedia itself does a hashcheck before uploading and sends an error if the image is identical to the previous one or a warning if the image already exists on the wiki server. You can check this by calling:</p>

<p><code class="highlighter-rouge">publish_to_wiki ("script", "username", "password")</code></p>

<p>where <code class="highlighter-rouge">script</code>, <code class="highlighter-rouge">username</code> and <code class="highlighter-rouge">password</code> correspond to the script that you want to publish, your username and password for <a href="https://wiki.octave.space"><code class="highlighter-rouge">wiki.octave.space</code></a> (this will be changed to <code class="highlighter-rouge">wiki.octave.org</code> later) respectively. One problem that I noted was Octave hangs up if the connection gets lost in the middle of the transfer. But this is not native to this function, it affects all the files that require to use libcurlâ€™s interface to Octave. Nevertheless, I tried to look into it, with the function <a href="https://curl.haxx.se/libcurl/c/CURLOPT_TIMEOUT.html"><code class="highlighter-rouge">CURLOPT_TIMEOUT</code></a> and other, as well. Unfortunately, I couldnâ€™t get a viable answer because the timeout value in the above function is measured from the start of the transfer and <strong>NOT</strong> when the connection gets lost. So suppose if someone has a large transfer, then setting this value is potentially dangerous because their tansfer will get cancelled in the middle of the process even though the connection is good. Other than this, there were provisions to exit the API if the speed gets below a given threshold. This again cannot be guaranteed because it might be that the user may have a lesser internet speed. So, the idea of resuming Octave was dropped altogether, its again upto the user to get a proper internet connection! Other than this, there was the quest of making test cases for <code class="highlighter-rouge">wiki_upload.m</code> for which I suggested to measure the <code class="highlighter-rouge">Content-Length</code> of the query string that is formed as part of the transfer. This again has problems, because the libcurl API for Octave doesnâ€™t let the developer know the actual query string which is transferred over the connection. FYI, the query string formation takes place <a href="https://hg.savannah.gnu.org/hgweb/octave/file/7dad5fa7e88e/liboctave/util/url-transfer.cc#l743"><code class="highlighter-rouge">here</code></a>. This would only add a big overhead for the returned values from the C++ API to the Octave code because all of the functions that use the <code class="highlighter-rouge">perform ()</code> (it actually performs the transfer) function will need to be changed. I initially had suggested this because during debugging I had actually changed the <code class="highlighter-rouge">form_query_string</code> function according to my needs. But then I realised that this is not feasible because:</p>

<ul>
  <li>
    <p>As mentioned above, there would be unnecessary overhead to change all the functions because of change in <code class="highlighter-rouge">form_query string</code> function. Also, a number of other already implemented functions use it. So, regression can occur.</p>
  </li>
  <li>
    <p>We actually cannot measure the actual Content-Length properly, because the content is sent in <em>UTF-8</em> format which replaces all the non-alphabetical characters with their UTF-8 version. So a whitespace is changed to <code class="highlighter-rouge">%20</code>. Of course there are other ways to measure the UTF values for all the characters by running various for loops and adding offsets to a given values to find another value, etc. But I do not think this is a good measure to test the main working of <em>wiki_upload</em> which essentially needs to check if the file has been uploaded or not on the wiki.</p>
  </li>
</ul>

<p>Will see if thereâ€™s anything else I could do about this, else I will need to manually check at various times if the file has been uploaded correctly or not.</p>

<p>Lastly, the commenting part, which I donâ€™t want to loose marks for, is left and Iâ€™ll be doing that in the coming days, before the evaluation so that Kai doesnâ€™t get a chance to bash me on this. ;-)</p>

<p><em>THIS COMPLETES THE FIRST HALF OF THE PROJECT, i.e., OCTAVE CODE SHARING.</em></p>

<hr />

<p>Next lined up is, setting up <strong>RESTful web services for Octave</strong>.</p>

<p>We had a good discussion over this too. First to be implemented is, <a href="https://www.mathworks.com/help/matlab/ref/weboptions.html"><code class="highlighter-rouge">weboptions</code></a>. I initially thought of implementing it using a <code class="highlighter-rouge">struct</code> in the backend. But then Kai suggested to use <em><code class="highlighter-rouge">Classdef</code></em> in Octave and making an object. Of course, he was right, one simple and foolish reason being, weboptions in MATLAB doesnâ€™t display the <code class="highlighter-rouge">Password</code> field and if <code class="highlighter-rouge">struct</code> is deployed for this, thereâ€™s no way that the password is stored in a plain text and displayed as obscured.</p>

<p><a href="https://bitbucket.org/me_ydv_5/octave/src/default/scripts/miscellaneous/weboptions.m">Here</a> is what Iâ€™ve implemented for this. It almost acts like the weboptions in Matlab with subtle differences. For example, when you call the following, it will show the answer that follows:</p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt;&gt;    d = weboptions

      &lt;object weboptions&gt;
</code></pre></div></div>
<p>MATLAB shows the values of the fields instead. For that Iâ€™ve created a method <code class="highlighter-rouge">values</code> so that when you call <code class="highlighter-rouge">d.values</code> or <code class="highlighter-rouge">values(d)</code>, you get to see all the values that are set for the object. There are a few problems which will most probably get rectified as me and Kai have another meeting on IRC. Basically, Iâ€™ll need to find a way to represent cell string in itâ€™s input form, i.e, something like</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ans =   {"foo", "bar"}
</code></pre></div></div>

<p>and not</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ans =
    {
        [1,1] = "foo"
        [1,2] = "bar"
    }
</code></pre></div></div>
<p>You can set values for the various fields and members in the object by calling <code class="highlighter-rouge">d.field_name = your_desired_value;</code>. This will do as desired. Some of the fields are currently for the MATLAB compatiblity and will be dealt with later, like <code class="highlighter-rouge">ContentReader</code>, <code class="highlighter-rouge">MediaType</code>, <code class="highlighter-rouge">CertificateFilename</code>, etc.</p>

<p>Oh and kindly strip your latest commit on <code class="highlighter-rouge">ocs</code> (a merge commit) in your local repo, else itâ€™ll create a new head. Sorry about that!</p>

<p>Wrapping up for now! Apologies for such a long post.</p>

<hr />

<p><a href="https://bitbucket.org/me_ydv_5/octave/commits/branch/ocs">Link</a> to BitBucket repo.</p>
:ET